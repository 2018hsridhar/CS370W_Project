// IN mainc.pp file for TUTORIAL 102
#include <igl/readOFF.h>
#include <igl/viewer/Viewer.h>
#include "tutorial_shared_path.h"
#include <igl/rotation_matrix_from_directions.h>
#include <igl/writeOFF.h>

Eigen::MatrixXd V;
Eigen::MatrixXi F;

Eigen::MatrixXd V_rotated;
Eigen::MatrixXi F_rotated;

// function is called when keyboard buttons are pressed down. useful for alternating amongst a set of differing views
bool key_down( igl::viewer::Viewer& viewer, unsigned char key, int modifier)
{
  std::cout << "Key : " << key << (unsigned int) key << std::endl;
  if ( key == '1' )
  {
    // clear data before drawing mesh
    viewer.data.clear();
    viewer.data.set_mesh(V,F);
    viewer.core.align_camera_center(V,F); // why is this needed?
  }
  else if ( key == '2' ) 
  {
    // clear data before drawing mesh
    viewer.data.clear();
    viewer.data.set_mesh(V_rotated,F_rotated);
    viewer.core.align_camera_center(V_rotated,F_rotated); // why is this needed?
  } 
  else if ( key == '3' ) 
  {
    viewer.data.clear();
    viewer.data.set_mesh(V_rotated,F_rotated);
    viewer.core.align_camera_center(V_rotated,F_rotated); // why is this needed?
    
  }
  return false;
}

int main(int argc, char *argv[])
{
  // Load a mesh in OFF format
  igl::readOFF(TUTORIAL_SHARED_PATH "/bunny.off", V, F);
  std::cout << R"(
1 switch to identity view
2 Switch to rotated view 1
3 Keep updating rotated view by (1) 
    )";

  // remember :: your FRAME OF REFERNECE is W.R.T camera ! -z, y and x are all weird
  Eigen::Vector3d e1 ( 0, 0, -1 ); // I would think to use Vector3f, but I guess not 
  Eigen::Vector3d e2 ( 1, 0, 0 ); // note :: should it be 3d or 3f? in general, vertices are MatrixXd??
  
  //Eigen::Vector3d e1 ( 0, 0, -1 ); // I would think to use Vector3f, but I guess not 
  //Eigen::Vector3d e2 ( -0.1, 0, -1 ); // note :: should it be 3d or 3f? in general, vertices are MatrixXd??

  // one particular issue atm :: this rotation always works by 90-degree angles !!
  Eigen::Matrix3d rot_matrix_zAxis = igl::rotation_matrix_from_directions (e1, e2 );

  V_rotated = V * rot_matrix_zAxis;
  F_rotated = F; // why woudl the faces change? 

  igl::writeOFF("dataset90Deg.off", V_rotated,F_rotated);

  // Plot the ROTATED mesh 
  igl::viewer::Viewer viewer;
  viewer.callback_key_down = &key_down;
  viewer.data.set_mesh(V, F);
  viewer.launch();


}


