// C++ includes
#include <iostream>
#include <fstream>

// MY LIBRARIES  
#include "glob_defs.h"
#include "helpers.h"

// LibIgl includes
#include <igl/writeOFF.h>
#include <igl/viewer/Viewer.h>

using namespace Eigen;  
using namespace std;
using namespace igl;

struct Mesh
{
	Eigen::MatrixXd V; Eigen::MatrixXi F;
} scan1,scan2;

int runPipeline();
bool key_down(igl::viewer::Viewer& viewer, unsigned char key, int mod);

//Eigen::Matrix4d T = Eigen::Matrix4d::Identity();
Eigen::Matrix4d T;

int main(int argc, char *argv[])
{
	// dumb reaosn ... must be in a func!!
	// testing out some existing "optimal" transformation matrices ... 
	/*
	T << 0.905716, 0.0236395, 0.423226,  0.100115,
		-0.055592, 0.996444, 0.0633116, -0.0254154,
		-0.420225, -0.0808702, 0.903809, -0.0150992,
		0		,0			,0			,1;
	*/
	T = Eigen::Matrix4d::Identity();
	T(0,3) = 1;
	T(1,3) = 1;
	T(2,3) = 1;
	runPipeline();
}

int runPipeline()
{
	igl::viewer::Viewer viewer;
	std::cout << "Executing test of rigid transformation" << std::endl;

	if(!readOFF(GLOBAL::pipelineScan1File,scan1.V,scan1.F)) {
		std::cout << "Failed to load partial scan one." << std::endl;
	} 

	std::cout << "Mesh one [" << GLOBAL::pipelineScan1File << "]" << std::endl;

	//std::cout << "Opening debug file" << std::endl;
	//debugFile.open(GLOBAL::pipelineDebugFile);

	// Develop an initial transformation matrix, filled with random data 
	HELPER::applyRigidTransformation(scan1.V,T,scan2.V); 
	scan2.F = scan1.F;

	viewer.data.clear();
	viewer.data.set_mesh(scan1.V,scan1.F);
	viewer.callback_key_down = key_down;
	std::cout<<"Press [I] to reset."<<std::endl;
	std::cout<<"Press [T] to transform."<<std::endl;


	std::cout << "Transformation matrix is" << std::endl; // expect a translation in z-axis ... this seems off!
	std::cout << T << std::endl; // expect a translation in z-axis ... this seems off!
	std::cout << "Original is \n";
	std::cout << scan1.V << std::endl;
	std::cout << "-----------------------------------\n";
	std::cout << "Transformed is \n";
	std::cout << scan2.V << std::endl;
	return viewer.launch();
}

bool key_down(igl::viewer::Viewer& viewer, unsigned char key, int mod)
{
	switch(key)
	{
		case '1':	
			viewer.data.clear();
			viewer.data.set_mesh(scan1.V,scan1.F);
			viewer.core.align_camera_center(scan1.V,scan1.F);				
			break;	
		case '2':
			viewer.data.clear();
			viewer.data.set_mesh(scan2.V,scan2.F);
			viewer.core.align_camera_center(scan1.V,scan1.F);	// #should be scan1.V,scan1.F
			//viewer.core.align_camera_center(scan2.V,scan2.F);	// #should be scan1.V,scan1.F
			break;
		default:
			return false;	
	}
	return true;
}


